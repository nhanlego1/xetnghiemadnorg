jQuery(document).ready(function() {
	jQuery('.animate').addClass("hidden").viewportChecker({
	    classToAdd: 'visible animated fadeIn', // Class to add to the elements when they are visible
	    offset: 10    
	   }); 



    jQuery('#search-btn').click(function () {
        if (jQuery("#search-input").is(":hidden")) {
            jQuery("#search-input").fadeIn(250);
            jQuery("#prostore-search-input").focus();
        } else {
            jQuery("#search-input").fadeOut(200);
        }
        return false;
    });

}); 





jQuery(function() {
 
    var dankov_sticky_menu_offset_top = jQuery('.menu').offset().top;
     
    var dankov_sticky_menu = function(){
        var scroll_top = jQuery(window).scrollTop();
    
        if (scroll_top > dankov_sticky_menu_offset_top) { 
            jQuery('.menu').addClass('sticky');
        } else {
            jQuery('.menu').removeClass('sticky'); 
        }   
    };
     
    dankov_sticky_menu();
     
    jQuery(window).scroll(function() {
         dankov_sticky_menu();
    });
 
});  

function dankov_nav() {
/* Menu */
    var window_width = jQuery(window).width();
    if (window_width >= 991) {
        jQuery('ul.sf-menu').superfish({
            delay: 100,
            animation: {
                opacity: 'show',
                height: 'show'
            },
            animationOut: {
                opacity: 'hide',
                height: 'hide'
            },
            speed: 350,
            speedOut: 350
        });
    }
    jQuery(window).resize(function () {
        if (jQuery(window).width() >= 991) {
            jQuery('ul.sf-menu').superfish({
                delay: 100,
                animation: {
                    opacity: 'show',
                    height: 'show'
                },
                animationOut: {
                    opacity: 'hide',
                    height: 'hide'
                },
                speed: 350,
                speedOut: 350
            });
        }
    });
/* Menu */

    /* Menu for devices */
    jQuery(function () {
        jQuery('#dl-menu').dlmenu({
            animationClasses: {
                classin: 'dl-animate-in-2',
                classout: 'dl-animate-out-2'
            }
        });
    });
    /* Menu for devices */
}


function dankov_slider() {
 jQuery('.flexslider').flexslider({

            // FLEXSLIDER API
            // namespace: "flex-",             //{NEW} String: Prefix string attached to the class of every element generated by the plugin
            // selector: ".slides > li",       //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
            animation: "slide",              //String: Select your animation type, "fade" or "slide"
            // easing: "swing",               //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
            // direction: "horizontal",        //String: Select the sliding direction, "horizontal" or "vertical"
            // reverse: false,                 //{NEW} Boolean: Reverse the animation direction
            // animationLoop: true,             //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
            // smoothHeight: false,            //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode  
            // startAt: 0,                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
            slideshow: true,                //Boolean: Animate slider automatically
            slideshowSpeed: 6000,           //Integer: Set the speed of the slideshow cycling, in milliseconds
            animationSpeed: 750,            //Integer: Set the speed of animations, in milliseconds
            // initDelay: 0,                   //{NEW} Integer: Set an initialization delay, in milliseconds
            // randomize: false,               //Boolean: Randomize slide order

            // Usability features
            // pauseOnAction: true,            //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
            // pauseOnHover: false,            //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
            // useCSS: true,                   //{NEW} Boolean: Slider will use CSS3 transitions if available
            // touch: true,                    //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
            // video: false,                   //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

            // Primary Controls
            // controlNav: false,               //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
            directionNav: true,             //Boolean: Create navigation for previous/next navigation? (true/false)
            // prevText: "Previous",           //String: Set the text for the "previous" directionNav item
            // nextText: "Next",               //String: Set the text for the "next" directionNav item

            // Secondary Navigation
            // keyboard: true,                 //Boolean: Allow slider navigating via keyboard left/right keys
            // multipleKeyboard: false,        //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
            // mousewheel: false,              //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
            // pausePlay: false,               //Boolean: Create pause/play dynamic element
            // pauseText: 'Pause',             //String: Set the text for the "pause" pausePlay item
            // playText: 'Play',               //String: Set the text for the "play" pausePlay item

            // Special properties
            // controlsContainer: "",          //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
            // manualControls: "",             //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
            // sync: "",                       //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
            // asNavFor: "",                   //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

            // Carousel Options
            // itemWidth: 0,                   //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
            // itemMargin: 0,                  //{NEW} Integer: Margin between carousel items.
            // minItems: 0,                    //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
            // maxItems: 0,                    //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
            // move: 0,                        //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
                                            
            // Callback API
            // start: function(){},            //Callback: function(slider) - Fires when the slider loads the first slide
            // before: function(){},           //Callback: function(slider) - Fires asynchronously with each slider animation
            // after: function(){},            //Callback: function(slider) - Fires after each slider animation completes
            // end: function(){},              //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
            // added: function(){},            //{NEW} Callback: function(slider) - Fires after a slide is added
            // removed: function(){}           //{NEW} Callback: function(slider) - Fires after a slide is removed
  });
}

jQuery(window).load(function() {
	dankov_nav();	
    dankov_slider();
});

function prostore_navigation_ex() {


    // jQuery("#navigation a").click(function () {
    //     if (navb.is(":visible") && navb.hasClass("mobile")) {
    //         navb.slideUp();
    //     }
    // });     


    var nava = jQuery(".nav-btn"),
        navb = jQuery("#navigation"),
        wind = jQuery(window).width(),  
        winh;

    jQuery(window).resize(function () {
        var navb = jQuery("#navigation"),
            wind = jQuery(window).width(),
            winh;
        
        if (wind > 1008) {
            navb.addClass("desktop");
            navb.removeClass("mobile")
        }
        if (wind < 1009) {
            navb.addClass("mobile");
            navb.removeClass("desktop")
        }

        // if (wind < 1009) {
        // jQuery('#navigation.mobile').css({'max-height': winh-150, 'overflow-y': 'scroll'});
        // }
        // if (wind > 1008) {
        //     jQuery('#navigation.desktop').css({'overflow': 'visible'});
        // }       

    });
            
        if (wind > 1008) {
            navb.addClass("desktop");
            navb.removeClass("mobile")
        }
        if (wind < 1009) {
            navb.addClass("mobile");
            navb.removeClass("desktop")
        }   
        // if (wind < 1009) {
        // jQuery('#navigation.mobile').css({'max-height': winh-150, 'overflow-y': 'scroll'});
        // }
        // if (wind > 1008) {
        //     jQuery('#navigation.desktop').css({'overflow': 'visible'});
        // }               

    // nava.click(function () {
    //     if (navb.is(":visible")) {
    //         navb.slideUp()
    //     } else {
    //         navb.slideDown()
    //     }
    // });     
  
}

jQuery(document).ready(function() {

    prostore_navigation_ex();   
    
});

